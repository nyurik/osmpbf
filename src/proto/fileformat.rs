// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `fileformat.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:OSMPBF.Blob)
pub struct Blob {
    // message fields
    // @@protoc_insertion_point(field:OSMPBF.Blob.raw_size)
    pub raw_size: ::std::option::Option<i32>,
    // message oneof groups
    pub data: ::std::option::Option<blob::Data>,
    // special fields
    // @@protoc_insertion_point(special_field:OSMPBF.Blob.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Blob {
    fn default() -> &'a Blob {
        <Blob as ::protobuf::Message>::default_instance()
    }
}

impl Blob {
    pub fn new() -> Blob {
        ::std::default::Default::default()
    }

    // optional int32 raw_size = 2;

    pub fn raw_size(&self) -> i32 {
        self.raw_size.unwrap_or(0)
    }

    pub fn clear_raw_size(&mut self) {
        self.raw_size = ::std::option::Option::None;
    }

    pub fn has_raw_size(&self) -> bool {
        self.raw_size.is_some()
    }

    // Param is passed by value, moved
    pub fn set_raw_size(&mut self, v: i32) {
        self.raw_size = ::std::option::Option::Some(v);
    }

    // optional bytes raw = 1;

    pub fn raw(&self) -> &[u8] {
        match self.data {
            ::std::option::Option::Some(blob::Data::Raw(ref v)) => v,
            _ => &[],
        }
    }

    pub fn clear_raw(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_raw(&self) -> bool {
        match self.data {
            ::std::option::Option::Some(blob::Data::Raw(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_raw(&mut self, v: ::std::vec::Vec<u8>) {
        self.data = ::std::option::Option::Some(blob::Data::Raw(v))
    }

    // Mutable pointer to the field.
    pub fn mut_raw(&mut self) -> &mut ::std::vec::Vec<u8> {
        if let ::std::option::Option::Some(blob::Data::Raw(_)) = self.data {
        } else {
            self.data = ::std::option::Option::Some(blob::Data::Raw(::std::vec::Vec::new()));
        }
        match self.data {
            ::std::option::Option::Some(blob::Data::Raw(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_raw(&mut self) -> ::std::vec::Vec<u8> {
        if self.has_raw() {
            match self.data.take() {
                ::std::option::Option::Some(blob::Data::Raw(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::vec::Vec::new()
        }
    }

    // optional bytes zlib_data = 3;

    pub fn zlib_data(&self) -> &[u8] {
        match self.data {
            ::std::option::Option::Some(blob::Data::ZlibData(ref v)) => v,
            _ => &[],
        }
    }

    pub fn clear_zlib_data(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_zlib_data(&self) -> bool {
        match self.data {
            ::std::option::Option::Some(blob::Data::ZlibData(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_zlib_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.data = ::std::option::Option::Some(blob::Data::ZlibData(v))
    }

    // Mutable pointer to the field.
    pub fn mut_zlib_data(&mut self) -> &mut ::std::vec::Vec<u8> {
        if let ::std::option::Option::Some(blob::Data::ZlibData(_)) = self.data {
        } else {
            self.data = ::std::option::Option::Some(blob::Data::ZlibData(::std::vec::Vec::new()));
        }
        match self.data {
            ::std::option::Option::Some(blob::Data::ZlibData(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_zlib_data(&mut self) -> ::std::vec::Vec<u8> {
        if self.has_zlib_data() {
            match self.data.take() {
                ::std::option::Option::Some(blob::Data::ZlibData(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::vec::Vec::new()
        }
    }

    // optional bytes lzma_data = 4;

    pub fn lzma_data(&self) -> &[u8] {
        match self.data {
            ::std::option::Option::Some(blob::Data::LzmaData(ref v)) => v,
            _ => &[],
        }
    }

    pub fn clear_lzma_data(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_lzma_data(&self) -> bool {
        match self.data {
            ::std::option::Option::Some(blob::Data::LzmaData(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_lzma_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.data = ::std::option::Option::Some(blob::Data::LzmaData(v))
    }

    // Mutable pointer to the field.
    pub fn mut_lzma_data(&mut self) -> &mut ::std::vec::Vec<u8> {
        if let ::std::option::Option::Some(blob::Data::LzmaData(_)) = self.data {
        } else {
            self.data = ::std::option::Option::Some(blob::Data::LzmaData(::std::vec::Vec::new()));
        }
        match self.data {
            ::std::option::Option::Some(blob::Data::LzmaData(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_lzma_data(&mut self) -> ::std::vec::Vec<u8> {
        if self.has_lzma_data() {
            match self.data.take() {
                ::std::option::Option::Some(blob::Data::LzmaData(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::vec::Vec::new()
        }
    }

    // optional bytes OBSOLETE_bzip2_data = 5;

    pub fn OBSOLETE_bzip2_data(&self) -> &[u8] {
        match self.data {
            ::std::option::Option::Some(blob::Data::OBSOLETEBzip2Data(ref v)) => v,
            _ => &[],
        }
    }

    pub fn clear_OBSOLETE_bzip2_data(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_OBSOLETE_bzip2_data(&self) -> bool {
        match self.data {
            ::std::option::Option::Some(blob::Data::OBSOLETEBzip2Data(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_OBSOLETE_bzip2_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.data = ::std::option::Option::Some(blob::Data::OBSOLETEBzip2Data(v))
    }

    // Mutable pointer to the field.
    pub fn mut_OBSOLETE_bzip2_data(&mut self) -> &mut ::std::vec::Vec<u8> {
        if let ::std::option::Option::Some(blob::Data::OBSOLETEBzip2Data(_)) = self.data {
        } else {
            self.data = ::std::option::Option::Some(blob::Data::OBSOLETEBzip2Data(::std::vec::Vec::new()));
        }
        match self.data {
            ::std::option::Option::Some(blob::Data::OBSOLETEBzip2Data(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_OBSOLETE_bzip2_data(&mut self) -> ::std::vec::Vec<u8> {
        if self.has_OBSOLETE_bzip2_data() {
            match self.data.take() {
                ::std::option::Option::Some(blob::Data::OBSOLETEBzip2Data(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::vec::Vec::new()
        }
    }

    // optional bytes lz4_data = 6;

    pub fn lz4_data(&self) -> &[u8] {
        match self.data {
            ::std::option::Option::Some(blob::Data::Lz4Data(ref v)) => v,
            _ => &[],
        }
    }

    pub fn clear_lz4_data(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_lz4_data(&self) -> bool {
        match self.data {
            ::std::option::Option::Some(blob::Data::Lz4Data(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_lz4_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.data = ::std::option::Option::Some(blob::Data::Lz4Data(v))
    }

    // Mutable pointer to the field.
    pub fn mut_lz4_data(&mut self) -> &mut ::std::vec::Vec<u8> {
        if let ::std::option::Option::Some(blob::Data::Lz4Data(_)) = self.data {
        } else {
            self.data = ::std::option::Option::Some(blob::Data::Lz4Data(::std::vec::Vec::new()));
        }
        match self.data {
            ::std::option::Option::Some(blob::Data::Lz4Data(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_lz4_data(&mut self) -> ::std::vec::Vec<u8> {
        if self.has_lz4_data() {
            match self.data.take() {
                ::std::option::Option::Some(blob::Data::Lz4Data(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::vec::Vec::new()
        }
    }

    // optional bytes zstd_data = 7;

    pub fn zstd_data(&self) -> &[u8] {
        match self.data {
            ::std::option::Option::Some(blob::Data::ZstdData(ref v)) => v,
            _ => &[],
        }
    }

    pub fn clear_zstd_data(&mut self) {
        self.data = ::std::option::Option::None;
    }

    pub fn has_zstd_data(&self) -> bool {
        match self.data {
            ::std::option::Option::Some(blob::Data::ZstdData(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_zstd_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.data = ::std::option::Option::Some(blob::Data::ZstdData(v))
    }

    // Mutable pointer to the field.
    pub fn mut_zstd_data(&mut self) -> &mut ::std::vec::Vec<u8> {
        if let ::std::option::Option::Some(blob::Data::ZstdData(_)) = self.data {
        } else {
            self.data = ::std::option::Option::Some(blob::Data::ZstdData(::std::vec::Vec::new()));
        }
        match self.data {
            ::std::option::Option::Some(blob::Data::ZstdData(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_zstd_data(&mut self) -> ::std::vec::Vec<u8> {
        if self.has_zstd_data() {
            match self.data.take() {
                ::std::option::Option::Some(blob::Data::ZstdData(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::vec::Vec::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(7);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "raw_size",
            |m: &Blob| { &m.raw_size },
            |m: &mut Blob| { &mut m.raw_size },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_deref_has_get_set_simpler_accessor::<_, _>(
            "raw",
            Blob::has_raw,
            Blob::raw,
            Blob::set_raw,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_deref_has_get_set_simpler_accessor::<_, _>(
            "zlib_data",
            Blob::has_zlib_data,
            Blob::zlib_data,
            Blob::set_zlib_data,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_deref_has_get_set_simpler_accessor::<_, _>(
            "lzma_data",
            Blob::has_lzma_data,
            Blob::lzma_data,
            Blob::set_lzma_data,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_deref_has_get_set_simpler_accessor::<_, _>(
            "OBSOLETE_bzip2_data",
            Blob::has_OBSOLETE_bzip2_data,
            Blob::OBSOLETE_bzip2_data,
            Blob::set_OBSOLETE_bzip2_data,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_deref_has_get_set_simpler_accessor::<_, _>(
            "lz4_data",
            Blob::has_lz4_data,
            Blob::lz4_data,
            Blob::set_lz4_data,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_deref_has_get_set_simpler_accessor::<_, _>(
            "zstd_data",
            Blob::has_zstd_data,
            Blob::zstd_data,
            Blob::set_zstd_data,
        ));
        oneofs.push(blob::Data::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Blob>(
            "Blob",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Blob {
    const NAME: &'static str = "Blob";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                16 => {
                    self.raw_size = ::std::option::Option::Some(is.read_int32()?);
                },
                10 => {
                    self.data = ::std::option::Option::Some(blob::Data::Raw(is.read_bytes()?));
                },
                26 => {
                    self.data = ::std::option::Option::Some(blob::Data::ZlibData(is.read_bytes()?));
                },
                34 => {
                    self.data = ::std::option::Option::Some(blob::Data::LzmaData(is.read_bytes()?));
                },
                42 => {
                    self.data = ::std::option::Option::Some(blob::Data::OBSOLETEBzip2Data(is.read_bytes()?));
                },
                50 => {
                    self.data = ::std::option::Option::Some(blob::Data::Lz4Data(is.read_bytes()?));
                },
                58 => {
                    self.data = ::std::option::Option::Some(blob::Data::ZstdData(is.read_bytes()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.raw_size {
            my_size += ::protobuf::rt::int32_size(2, v);
        }
        if let ::std::option::Option::Some(ref v) = self.data {
            match v {
                &blob::Data::Raw(ref v) => {
                    my_size += ::protobuf::rt::bytes_size(1, &v);
                },
                &blob::Data::ZlibData(ref v) => {
                    my_size += ::protobuf::rt::bytes_size(3, &v);
                },
                &blob::Data::LzmaData(ref v) => {
                    my_size += ::protobuf::rt::bytes_size(4, &v);
                },
                &blob::Data::OBSOLETEBzip2Data(ref v) => {
                    my_size += ::protobuf::rt::bytes_size(5, &v);
                },
                &blob::Data::Lz4Data(ref v) => {
                    my_size += ::protobuf::rt::bytes_size(6, &v);
                },
                &blob::Data::ZstdData(ref v) => {
                    my_size += ::protobuf::rt::bytes_size(7, &v);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.raw_size {
            os.write_int32(2, v)?;
        }
        if let ::std::option::Option::Some(ref v) = self.data {
            match v {
                &blob::Data::Raw(ref v) => {
                    os.write_bytes(1, v)?;
                },
                &blob::Data::ZlibData(ref v) => {
                    os.write_bytes(3, v)?;
                },
                &blob::Data::LzmaData(ref v) => {
                    os.write_bytes(4, v)?;
                },
                &blob::Data::OBSOLETEBzip2Data(ref v) => {
                    os.write_bytes(5, v)?;
                },
                &blob::Data::Lz4Data(ref v) => {
                    os.write_bytes(6, v)?;
                },
                &blob::Data::ZstdData(ref v) => {
                    os.write_bytes(7, v)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Blob {
        Blob::new()
    }

    fn clear(&mut self) {
        self.raw_size = ::std::option::Option::None;
        self.data = ::std::option::Option::None;
        self.data = ::std::option::Option::None;
        self.data = ::std::option::Option::None;
        self.data = ::std::option::Option::None;
        self.data = ::std::option::Option::None;
        self.data = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Blob {
        static instance: Blob = Blob {
            raw_size: ::std::option::Option::None,
            data: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Blob {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Blob").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Blob {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Blob {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `Blob`
pub mod blob {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:OSMPBF.Blob.data)
    pub enum Data {
        // @@protoc_insertion_point(oneof_field:OSMPBF.Blob.raw)
        Raw(::std::vec::Vec<u8>),
        // @@protoc_insertion_point(oneof_field:OSMPBF.Blob.zlib_data)
        ZlibData(::std::vec::Vec<u8>),
        // @@protoc_insertion_point(oneof_field:OSMPBF.Blob.lzma_data)
        LzmaData(::std::vec::Vec<u8>),
        // @@protoc_insertion_point(oneof_field:OSMPBF.Blob.OBSOLETE_bzip2_data)
        OBSOLETEBzip2Data(::std::vec::Vec<u8>),
        // @@protoc_insertion_point(oneof_field:OSMPBF.Blob.lz4_data)
        Lz4Data(::std::vec::Vec<u8>),
        // @@protoc_insertion_point(oneof_field:OSMPBF.Blob.zstd_data)
        ZstdData(::std::vec::Vec<u8>),
    }

    impl ::protobuf::Oneof for Data {
    }

    impl ::protobuf::OneofFull for Data {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::Blob as ::protobuf::MessageFull>::descriptor().oneof_by_name("data").unwrap()).clone()
        }
    }

    impl Data {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Data>("data")
        }
    }
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:OSMPBF.BlobHeader)
pub struct BlobHeader {
    // message fields
    // @@protoc_insertion_point(field:OSMPBF.BlobHeader.type)
    pub type_: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:OSMPBF.BlobHeader.indexdata)
    pub indexdata: ::std::option::Option<::std::vec::Vec<u8>>,
    // @@protoc_insertion_point(field:OSMPBF.BlobHeader.datasize)
    pub datasize: ::std::option::Option<i32>,
    // special fields
    // @@protoc_insertion_point(special_field:OSMPBF.BlobHeader.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a BlobHeader {
    fn default() -> &'a BlobHeader {
        <BlobHeader as ::protobuf::Message>::default_instance()
    }
}

impl BlobHeader {
    pub fn new() -> BlobHeader {
        ::std::default::Default::default()
    }

    // required string type = 1;

    pub fn type_(&self) -> &str {
        match self.type_.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_type_(&mut self) {
        self.type_ = ::std::option::Option::None;
    }

    pub fn has_type(&self) -> bool {
        self.type_.is_some()
    }

    // Param is passed by value, moved
    pub fn set_type(&mut self, v: ::std::string::String) {
        self.type_ = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_type(&mut self) -> &mut ::std::string::String {
        if self.type_.is_none() {
            self.type_ = ::std::option::Option::Some(::std::string::String::new());
        }
        self.type_.as_mut().unwrap()
    }

    // Take field
    pub fn take_type_(&mut self) -> ::std::string::String {
        self.type_.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional bytes indexdata = 2;

    pub fn indexdata(&self) -> &[u8] {
        match self.indexdata.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_indexdata(&mut self) {
        self.indexdata = ::std::option::Option::None;
    }

    pub fn has_indexdata(&self) -> bool {
        self.indexdata.is_some()
    }

    // Param is passed by value, moved
    pub fn set_indexdata(&mut self, v: ::std::vec::Vec<u8>) {
        self.indexdata = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_indexdata(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.indexdata.is_none() {
            self.indexdata = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.indexdata.as_mut().unwrap()
    }

    // Take field
    pub fn take_indexdata(&mut self) -> ::std::vec::Vec<u8> {
        self.indexdata.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // required int32 datasize = 3;

    pub fn datasize(&self) -> i32 {
        self.datasize.unwrap_or(0)
    }

    pub fn clear_datasize(&mut self) {
        self.datasize = ::std::option::Option::None;
    }

    pub fn has_datasize(&self) -> bool {
        self.datasize.is_some()
    }

    // Param is passed by value, moved
    pub fn set_datasize(&mut self, v: i32) {
        self.datasize = ::std::option::Option::Some(v);
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "type",
            |m: &BlobHeader| { &m.type_ },
            |m: &mut BlobHeader| { &mut m.type_ },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "indexdata",
            |m: &BlobHeader| { &m.indexdata },
            |m: &mut BlobHeader| { &mut m.indexdata },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "datasize",
            |m: &BlobHeader| { &m.datasize },
            |m: &mut BlobHeader| { &mut m.datasize },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<BlobHeader>(
            "BlobHeader",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for BlobHeader {
    const NAME: &'static str = "BlobHeader";

    fn is_initialized(&self) -> bool {
        if self.type_.is_none() {
            return false;
        }
        if self.datasize.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.type_ = ::std::option::Option::Some(is.read_string()?);
                },
                18 => {
                    self.indexdata = ::std::option::Option::Some(is.read_bytes()?);
                },
                24 => {
                    self.datasize = ::std::option::Option::Some(is.read_int32()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.type_.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.indexdata.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        if let Some(v) = self.datasize {
            my_size += ::protobuf::rt::int32_size(3, v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.type_.as_ref() {
            os.write_string(1, v)?;
        }
        if let Some(v) = self.indexdata.as_ref() {
            os.write_bytes(2, v)?;
        }
        if let Some(v) = self.datasize {
            os.write_int32(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> BlobHeader {
        BlobHeader::new()
    }

    fn clear(&mut self) {
        self.type_ = ::std::option::Option::None;
        self.indexdata = ::std::option::Option::None;
        self.datasize = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static BlobHeader {
        static instance: BlobHeader = BlobHeader {
            type_: ::std::option::Option::None,
            indexdata: ::std::option::Option::None,
            datasize: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for BlobHeader {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("BlobHeader").unwrap()).clone()
    }
}

impl ::std::fmt::Display for BlobHeader {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BlobHeader {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x10fileformat.proto\x12\x06OSMPBF\"\xed\x01\n\x04Blob\x12\x19\n\x08ra\
    w_size\x18\x02\x20\x01(\x05R\x07rawSize\x12\x12\n\x03raw\x18\x01\x20\x01\
    (\x0cH\0R\x03raw\x12\x1d\n\tzlib_data\x18\x03\x20\x01(\x0cH\0R\x08zlibDa\
    ta\x12\x1d\n\tlzma_data\x18\x04\x20\x01(\x0cH\0R\x08lzmaData\x124\n\x13O\
    BSOLETE_bzip2_data\x18\x05\x20\x01(\x0cH\0R\x11OBSOLETEBzip2DataB\x02\
    \x18\x01\x12\x1b\n\x08lz4_data\x18\x06\x20\x01(\x0cH\0R\x07lz4Data\x12\
    \x1d\n\tzstd_data\x18\x07\x20\x01(\x0cH\0R\x08zstdDataB\x06\n\x04data\"Z\
    \n\nBlobHeader\x12\x12\n\x04type\x18\x01\x20\x02(\tR\x04type\x12\x1c\n\t\
    indexdata\x18\x02\x20\x01(\x0cR\tindexdata\x12\x1a\n\x08datasize\x18\x03\
    \x20\x02(\x05R\x08datasizeB\x0f\n\rcrosby.binaryb\x06proto2\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(2);
            messages.push(Blob::generated_message_descriptor_data());
            messages.push(BlobHeader::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
